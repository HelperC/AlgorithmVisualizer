{"version":3,"sources":["helpers/pathFindingAlgorithms/pathFindingHelper.js","components/Home/index.jsx","constants/errorConstants.js","store/error/actions/index.js","helpers/fetchData.js","constants/gridConstants.js","store/pathFindingAlgorithms/actions/index.js","helpers/pathFindingAlgorithms/dataVisualizer.js","constants/pathfindingAlgorithms.js","store/error/reducers/index.js","store/error/context/index.js","store/pathFindingAlgorithms/reducers/index.js","store/pathFindingAlgorithms/context/index.js","components/PathFindingAlgorithms/Nav/index.jsx","constants/apiConstants.js","components/Error/index.jsx","components/PathFindingAlgorithms/Layout/index.jsx","store/sortingAlgorithms/actions/index.js","constants/sortingAlgorithmsConstants.js","helpers/sortingAlgorithmsHelper.js","store/sortingAlgorithms/reducers/index.js","store/sortingAlgorithms/context/index.js","components/SortingAlgorithmsVisualizer/NavBar/index.jsx","components/SortingAlgorithmsVisualizer/Layout/index.jsx","components/SortingAlgorithmsVisualizer/Container.jsx","components/Home/NavMenu/index.jsx","components/Home/Layout.jsx","components/AppRoute.jsx","components/Error/NotFound/index.jsx","components/Modal/VerticallyCenteredModal.js","components/PathFindingAlgorithms/Grid/Node/index.jsx","components/PathFindingAlgorithms/Grid/index.jsx","components/PathFindingAlgorithms/Container.jsx","App.jsx","registerServiceWorker.js","index.js"],"names":["StartNodeRow","StartNodeCol","EndNodeRow","EndNodeCol","Home","to","DEFAULT_ERROR_MESSAGE","showError","messages","type","payload","makePostApiCallAsync","url","data","dispatchError","a","async","fetch","method","headers","body","response","result","json","status","modalTutorialContent","title","__html","setIsNavbarClickable","isClickable","setWeightNode","row","col","setWallNode","setTotalNodesExplored","value","visualizeResult","dispatch","visitedNodesInOrder","nodesInShortestPathOrder","totalNodesExplored","animationSpeed","allVisitedNodesInOrder","allNodesInShortestPathOrder","animateResult","visualizeMazeGeneration","nodes","mazeType","animateMazeGeneration","i","node","setTimeout","length","clearTimeout","animateShortestPath","element","getElement","className","nodeName","document","getElementById","MAZE_TYPES","label","DEFAULT_ANIMATION","ANIMATION_SPEEDS","errorReducer","state","initialState","action","ErrorContext","createContext","ErrorProvider","props","useReducer","Provider","children","getInitialGrid","grid","createNode","removeAllWeightNodes","isWeight","clearGrid","isStart","isEnd","isWall","isPlaceable","newGrid","slice","newNode","setStartNode","setEndNode","isGridChanged","pathFindingAlgorithmsReducer","isLoading","isNavbarClickable","MarkGridAsChanged","startNode","endNode","algorithm","algorithms","find","el","isWeightNodeAllowed","algorithmDescription","description","PathFindingAlgorithmsContext","PathFindingAlgorithmsProvider","PathfindingAlgorithmsNavbar","useContext","useState","setAnimationSpeed","showAlgorithmsMenu","setShowAlgorithmsMenu","showMazesMenu","setShowMazesMenu","showAnimationSpeed","setShowAnimationSpeed","Navbar","bg","expand","Brand","NavLink","tag","Link","Toggle","aria-controls","Collapse","id","Nav","NavItem","NavDropdown","onMouseOver","onMouseLeave","show","noCaret","map","currentElement","index","Item","key","onClick","setAlgorithm","JSON","stringify","undefined","isSuccess","handleMazeGeneration","ButtonToolbar","Button","variant","fetchData","Spinner","as","animation","size","role","aria-hidden","Error","Alert","onClose","dismissible","Heading","PathFindingAlgorithmsLayout","setTotalSwaps","setBarChartElementBackgroundColor","elementsIndexes","color","getInitialChart","barChart","labels","dataset","backgroundColor","dataSet","number","Math","floor","random","push","generateNewChart","datasets","setBackgroundColorToChartElements","elements","visualizeArrayElementsSwapping","swappingIndexes","timeOutMs","firstIndex","secondIndex","Promise","all","timeout","swapElements","ms","resolve","temp","secondElement","sortingAlgorithmsReducer","newChart","oldDataSet","Object","assign","totalSwaps","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","SortingAlgorithmsContext","SortingAlgorithmsProvider","SortingAlgorithmsNavbar","Array","swapIndexes","SortingAlgorithmsLayout","SortingAlgorithmsContainer","useEffect","height","NavMenu","collapsed","setCollapsed","light","Container","NavbarBrand","NavbarToggler","isOpen","navbar","MainLayout","AppRoute","Component","component","layout","Layout","rest","render","NotFound","class","VerticallyCenteredModal","Modal","aria-labelledby","centered","scrollable","Header","closeButton","Title","currentPage","totalPages","Body","dangerouslySetInnerHTML","Footer","onHide","previousPage","nextPage","Node","extraClassName","event","onMouseDown","onMouseUp","Grid","isMouseStillClicked","setIsMouseStillClicked","isShiftStillPressed","setIsShiftStillPressed","addEventListener","handleKeyPress","handleKeyUp","removeEventListener","e","keyCode","rowIndex","nodeIndex","ctrlKey","altKey","shiftKey","handleOnClick","handleMouseOver","PathFindingAlgorithmsContainer","modalShow","setModalShow","pageNumber","setPageNumber","src","alt","App","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","baseUrl","getElementsByTagName","getAttribute","rootElement","ReactDOM","basename","URL","process","origin","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.46aab52f.chunk.js","sourcesContent":["import {\r\n  ROWS,\r\n  COLS,\r\n  START_NODE_ROW,\r\n  START_NODE_COL,\r\n  END_NODE_ROW,\r\n  END_NODE_COL,\r\n  SHORTEST_PATH_CLASSNAME,\r\n  VISITED_NODE_CLASSNAME\r\n} from '../../constants/gridConstants';\r\n\r\n// Modifiable\r\nlet StartNodeRow;\r\nlet StartNodeCol;\r\nlet EndNodeRow;\r\nlet EndNodeCol;\r\n\r\nexport function getInitialGrid() {\r\n  const grid = [[], []];\r\n  for (let row = 0; row < ROWS; row++) {\r\n    grid[row] = [];\r\n    for (let col = 0; col < COLS; col++) {\r\n      grid[row][col] = createNode(row, col);\r\n    }\r\n  }\r\n\r\n  StartNodeRow = START_NODE_ROW;\r\n  StartNodeCol = START_NODE_COL;\r\n  EndNodeRow = END_NODE_ROW;\r\n  EndNodeCol = END_NODE_COL;\r\n\r\n  return grid;\r\n}\r\n\r\nexport const removeAllWeightNodes = grid => {\r\n  if (!grid) return;\r\n  for (let row = 0; row < ROWS; row++) {\r\n    for (let col = 0; col < COLS; col++) {\r\n      if (grid[row][col].isWeight) {\r\n        grid[row][col].isWeight = false;\r\n      }\r\n    }\r\n  }\r\n  return grid;\r\n};\r\n\r\nexport const clearGrid = () => {\r\n  const nodeClassName = 'node';\r\n  for (let row = 0; row < ROWS; row++) {\r\n    for (let col = 0; col < COLS; col++) {\r\n      const element = document.getElementById(`${nodeClassName}-${row}-${col}`);\r\n      if (\r\n        element &&\r\n        (element.className === SHORTEST_PATH_CLASSNAME ||\r\n          element.className === VISITED_NODE_CLASSNAME)\r\n      ) {\r\n        element.className = nodeClassName;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst createNode = (row, col) => {\r\n  return {\r\n    row,\r\n    col,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isEnd: row === END_NODE_ROW && col === END_NODE_COL,\r\n    isWall: false,\r\n    isWeight: false\r\n  };\r\n};\r\n\r\nexport const setWallNode = (grid, row, col) => {\r\n  if (!isPlaceable(row, col)) return grid;\r\n\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n    isWeight: false\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nexport const setWeightNode = (grid, row, col) => {\r\n  if (!isPlaceable(row, col)) return grid;\r\n\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWeight: !node.isWeight,\r\n    isWall: false\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nexport const setStartNode = (grid, row, col) => {\r\n  if (!isPlaceable(row, col)) {\r\n    return grid;\r\n  }\r\n\r\n  const newGrid = grid.slice();\r\n  newGrid[StartNodeRow][StartNodeCol].isStart = false;\r\n  newGrid[row][col].isStart = true;\r\n  newGrid[row][col].isWall = false;\r\n  newGrid[row][col].isWeight = false;\r\n\r\n  StartNodeRow = row;\r\n  StartNodeCol = col;\r\n\r\n  return newGrid;\r\n};\r\n\r\nexport const setEndNode = (grid, row, col) => {\r\n  if (!isPlaceable(row, col)) {\r\n    return grid;\r\n  }\r\n\r\n  const newGrid = grid.slice();\r\n  newGrid[EndNodeRow][EndNodeCol].isEnd = false;\r\n  newGrid[row][col].isEnd = true;\r\n  newGrid[row][col].isWall = false;\r\n  newGrid[row][col].isWeight = false;\r\n\r\n  EndNodeRow = row;\r\n  EndNodeCol = col;\r\n\r\n  return newGrid;\r\n};\r\n\r\nconst isPlaceable = (row, col) => {\r\n  if (\r\n    (row === StartNodeRow && col === StartNodeCol) ||\r\n    (row === EndNodeRow && col === EndNodeCol)\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n","import React, { Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const Home = () => {\r\n  return (\r\n    <Fragment>\r\n      <div>\r\n        <h1>Welcome to AlgoVisualizer!</h1>\r\n        <p>Please choose one of the following algorithms visualizer</p>\r\n        <ol>\r\n          <li>\r\n            <Link to=\"/pathfindingAlgorithms\">\r\n              Pathfinding algorithms visualizer\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <div>\r\n              <Link to=\"/sortingAlgorithms\">Sorting algorithms visualizer</Link>\r\n              &nbsp; - Currently in beta version!\r\n            </div>\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n","export const SHOW_ERROR_WITH_MESSAGE = 'SHOW_ERROR_WITH_MESSAGE';\r\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\r\nexport const DEFAULT_ERROR_MESSAGE =\r\n  'Something terribly went wrong! Please try again later.';\r\n","import {\r\n  SHOW_ERROR_WITH_MESSAGE,\r\n  CLEAR_ERRORS\r\n} from '../../../constants/errorConstants';\r\n\r\nexport const showError = messages => {\r\n  return {\r\n    type: SHOW_ERROR_WITH_MESSAGE,\r\n    payload: messages\r\n  };\r\n};\r\n\r\nexport const clearErrors = () => {\r\n  return {\r\n    type: CLEAR_ERRORS\r\n  };\r\n};\r\n","import { showError } from '../store/error/actions';\r\nimport { DEFAULT_ERROR_MESSAGE } from '../constants/errorConstants';\r\n\r\nexport const makePostApiCallAsync = async (url, data, dispatchError) => {\r\n  try {\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      },\r\n      body: data\r\n    });\r\n\r\n    const result = response.json();\r\n    if (response.status <= 400) {\r\n      return result;\r\n    } else {\r\n      dispatchError(showError([DEFAULT_ERROR_MESSAGE]));\r\n    }\r\n  } catch (error) {\r\n    dispatchError(showError([DEFAULT_ERROR_MESSAGE]));\r\n  }\r\n};\r\n","export const ROWS = 21;\r\nexport const COLS = 60;\r\n\r\nexport const START_NODE_ROW = 5;\r\nexport const START_NODE_COL = 15;\r\nexport const END_NODE_ROW = 10;\r\nexport const END_NODE_COL = 35;\r\n\r\nexport const TOTAL_NODES_EXPLORED_DEFAULT_VALUE = 0;\r\n\r\nexport const INITIALIZE_GRID = 'INITIALIZE_GRID';\r\nexport const SET_START_NODE = 'SET_START_NODE';\r\nexport const SET_END_NODE = 'SET_END_NODE';\r\n\r\nexport const SET_IS_NAVBAR_CLICKABLE = 'SET_IS_NAVBAR_CLICKABLE';\r\n\r\nexport const SET_WEIGHT_NODE = 'SET_WEIGHT_NODE';\r\nexport const SET_WALL_NODE = 'SET_WALL_NODE';\r\n\r\nexport const SET_TOTAL_NODES_EXPLORED = 'SET_TOTAL_NODES_EXPLORED';\r\n\r\nexport const SET_ALGORITHM = 'SET_ALGORITHM';\r\nexport const SET_ALGORITHM_DESCRIPTION = 'SET_ALGORITHM_DESCRIPTION';\r\n\r\nexport const REMOVE_WEIGHT_NODES = 'REMOVE_WEIGHT_NODES';\r\n\r\nexport const CLEAR_STATE = 'CLEAR_STATE';\r\nexport const CLEAR_GRID = 'CLEAR_GRID';\r\n\r\nexport const SHORTEST_PATH_CLASSNAME = 'node node-shortest-path';\r\nexport const VISITED_NODE_CLASSNAME = 'node node-visited';\r\n\r\nexport const modalTutorialContent = [\r\n  {\r\n    title: 'Welcome to Algorithm Visualizer!',\r\n    body: {\r\n      __html:\r\n        '<h4>This short tutorial will walk you through the basic features of the application and will show you how to use them.</h4><p>If you want to wade right in, feel free to press the \"Skip Tutorial\" button below. Otherwise, press \"Next\"!</p><p><b>P.S Even though that this project is responsive it is not recommended to use it on phones.</b></p>',\r\n    },\r\n  },\r\n  {\r\n    title: 'What is a pathfinding algorithm ?',\r\n    body: {\r\n      __html:\r\n        '<h4>At its core, a pathfinding algorithm searches a graph/grid by starting at one vertex/node and exploring adjacent nodes until the destination node is reached, generally with the intent of finding the cheapest route.</h4><p>All the algorithms for this application are adapted for a 2D grid, where movements from node to node have cost of 1.</p><img class=\"img-fluid rounded mx-auto d-block\" src=\"point-a-b.jpg\" />',\r\n    },\r\n  },\r\n  {\r\n    title: 'How to pick an algorithm',\r\n    body: {\r\n      __html:\r\n        '<h4>Choose an algorithm from the \"Algorithms\" drop-down menu.</h4><p>Note that some algorithms are <strong><i>unweighted</i></strong>, while others are <strong><i>weighted</i></strong>. Unweighted algorithms do not take weight nodes into account, whereas weighted ones do. Furthermore, not all algorithms guarantee the shortest path.</p><img class=\"img-fluid rounded mx-auto d-block\" src=\"algorithms-menu.jpg\" />',\r\n    },\r\n  },\r\n  {\r\n    title: 'Meet the algorithms',\r\n    body: {\r\n      __html:\r\n        \"<h4>Not all algorithms are equal. Please read the notes down below!</h4><ul><li><b>A* Search</b> is <b><i>weighted</i></b> and it is arguably the best pathfinding algorithm out there. It uses heuristics to <b>guarantee</b> the shortest path and is much faster than Dijkstra's Algorithm</li><li><b>Dijkstra's Algorithm is also </b> <b><i>weighted</i></b>. Dijkstra's algorithm is the father of pathfinding algorithms and it </b> <b>guarantees</b> the shortest path</li><li><b>Breath-first Search</b> is <b><i>unweighted</i></b> and it's a good algorithm which <b>guarantees</b> the shortest path</li><li><b>Depth-first Search</b> is <b><i>unweighted</i></b> and it's a very bad algorithm for pathfinding. Moreover, it <b>does not guarantee</b> the shortest path</li></ul><p><b>P.S</b> Many new algorithms are going to come out with the next version of this app!</p>\",\r\n    },\r\n  },\r\n  {\r\n    title: 'How to move start and end point nodes',\r\n    body: {\r\n      __html:\r\n        '<div><div><h4>1. How to set a new start point.</h4><p>1.1 In order to set new start point you simply need to hold down \"Ctrl\" key while clicking on the desired node.</p></div><div><h4>2. How to set a new end point.</h4><p>2.1 Setting an end node is the same as setting start node but instead of holding down <b>\"Ctrl\"</b> key you must hold down <b>\"Alt\"</b> key.</p><img class=\"img-fluid mx-auto d-block\" src=\"set-start-end-nodes.gif\" /></div></div>',\r\n    },\r\n  },\r\n  {\r\n    title: 'How to add and remove weight and wall nodes',\r\n    body: {\r\n      __html:\r\n        '<div><div><h4>1. How to add wall node.</h4><h5>1.1 In order to add wall node you need to click on the desired node. Additionaly, you can hold down your left mouse button while moving over the nodes and this will also set wall nodes.</h5></div><div><h4>2. How to add weight node.</h4><h5>2.1 Adding a wall node is the same as adding weight node except we have to keep the <b>\"Shift\"</b> key pressed.</h5><div><h4>3. Removing wall and weight nodes</h4><h5>In order to remove wall or weight node, simply click onto the node with the same key combination you have used to add them or use the \"Clear board\" button.</h6></div></div><p><b>Walls</b> are <b>impassable</b> meaning that a path <i>cannot</i> cross through. <b>Weights</b>, however, are <b>not</b> impassable. They simply cost <b>more</b> to move through. If you are wondering what does that mean, imagine the following situation: It is time to go home after a long day at work and you turn on your GPS, put in your home address and the GPS will calculate the route for you. But in the meantime, there could be a traffic jam so the GPS would say: \"Hey, there is a traffic jam, would you like me to take a roundabout route which will save you a lot of time by avoiding the traffic jams and you will get home much faster\". In this application, moving through a weight node has a \"cost\" of 15.</p><img class=\"img-fluid mx-auto d-block\" src=\"set-weight-and-wall-nodes.gif\" /></div></div>',\r\n    },\r\n  },\r\n  {\r\n    title: 'How to generate mazes/labyrinths',\r\n    body: {\r\n      __html:\r\n        '<h4>Use the navbar menu \"Mazes\" to generate different mazes/labyrinths!</h4><img class=\"img-fluid rounded ml-auto d-block\" src=\"navbar-menu.jpg\" />',\r\n    },\r\n  },\r\n  {\r\n    title: 'How to pick visualization speed',\r\n    body: {\r\n      __html:\r\n        '<h4>Use the navbar dropdown menu \"Animation speed\" to choose the desired animation speed.!</h4><img class=\"img-fluid rounded ml-auto d-block\" src=\"navbar-menu.jpg\" />',\r\n    },\r\n  },\r\n  {\r\n    title: 'How to visualize an algorithm',\r\n    body: {\r\n      __html:\r\n        '<h4>Use the navbar buttons to visualize algorithms and clear grid!</h4><p>Click on the \"Visualize\" button after you have chosen an algorithm in order to visualize it. Also, you can clear the current path, walls and weights from the \"Clear Board\" button positioned in the top right corner. Moreover, you do not need to clear the board manually after you have visualized given algorithm, simply choose the new algorithm which you want to visualize and the grid will clear itself automatically when \"Visualize\" button is clicked.</p><img class=\"img-fluid rounded ml-auto d-block\" src=\"visualize-button.jpg\" />',\r\n    },\r\n  },\r\n  {\r\n    title: 'Thank you for coming to this stage of the tutorial.',\r\n    body: {\r\n      __html:\r\n        '<h4>I believe that you are ready to go on your own now and explore the different algorithms.</h4><p>If for some reason you want to get back to this tutorial simply refresh the page.</p><p> By the way, if you are interested in the source code of this project you can check it out in my <a href=\"https://github.com/melikpehlivanov/AlgorithmVisualizer\" target=\"_blank\">github</a> account. Giving the project a star is highly appreciated!</p>',\r\n    },\r\n  },\r\n];\r\n","import {\r\n  INITIALIZE_GRID,\r\n  SET_IS_NAVBAR_CLICKABLE,\r\n  SET_START_NODE,\r\n  SET_END_NODE,\r\n  SET_WEIGHT_NODE,\r\n  SET_WALL_NODE,\r\n  SET_ALGORITHM,\r\n  SET_ALGORITHM_DESCRIPTION,\r\n  CLEAR_STATE,\r\n  REMOVE_WEIGHT_NODES,\r\n  CLEAR_GRID,\r\n  SET_TOTAL_NODES_EXPLORED\r\n} from '../../../constants/gridConstants';\r\n\r\nexport const initializeGrid = () => {\r\n  return {\r\n    type: INITIALIZE_GRID\r\n  };\r\n};\r\n\r\nexport const setIsNavbarClickable = isClickable => {\r\n  return {\r\n    type: SET_IS_NAVBAR_CLICKABLE,\r\n    payload: isClickable\r\n  };\r\n};\r\n\r\nexport const setStartNode = (row, col) => {\r\n  return {\r\n    type: SET_START_NODE,\r\n    payload: { row, col }\r\n  };\r\n};\r\n\r\nexport const setEndNode = (row, col) => {\r\n  return {\r\n    type: SET_END_NODE,\r\n    payload: { row, col }\r\n  };\r\n};\r\n\r\nexport const setWeightNode = (row, col) => {\r\n  return {\r\n    type: SET_WEIGHT_NODE,\r\n    payload: { row, col }\r\n  };\r\n};\r\n\r\nexport const setWallNode = (row, col) => {\r\n  return {\r\n    type: SET_WALL_NODE,\r\n    payload: { row, col }\r\n  };\r\n};\r\n\r\nexport const setTotalNodesExplored = value => {\r\n  return {\r\n    type: SET_TOTAL_NODES_EXPLORED,\r\n    payload: value\r\n  };\r\n};\r\n\r\nexport const setAlgorithm = algorithm => {\r\n  return {\r\n    type: SET_ALGORITHM,\r\n    payload: algorithm\r\n  };\r\n};\r\n\r\nexport const setAlgorithmDescription = description => {\r\n  return {\r\n    type: SET_ALGORITHM_DESCRIPTION,\r\n    payload: description\r\n  };\r\n};\r\n\r\nexport const clearState = () => {\r\n  return {\r\n    type: CLEAR_STATE\r\n  };\r\n};\r\n\r\nexport const clearGrid = () => {\r\n  return {\r\n    type: CLEAR_GRID\r\n  };\r\n};\r\n\r\nexport const removeWeightNodes = () => {\r\n  return {\r\n    type: REMOVE_WEIGHT_NODES\r\n  };\r\n};\r\n","import {\r\n  SHORTEST_PATH_CLASSNAME,\r\n  VISITED_NODE_CLASSNAME,\r\n} from '../../constants/gridConstants';\r\nimport {\r\n  setIsNavbarClickable,\r\n  setWallNode,\r\n  setWeightNode,\r\n  setTotalNodesExplored,\r\n} from '../../store/pathFindingAlgorithms/actions';\r\n\r\nconst nodeName = 'node';\r\nconst mazeGenerationAnimationSpeed = 20;\r\n\r\nexport const visualizeResult = (\r\n  dispatch,\r\n  visitedNodesInOrder,\r\n  nodesInShortestPathOrder,\r\n  totalNodesExplored,\r\n  animationSpeed\r\n) => {\r\n  const allVisitedNodesInOrder = visitedNodesInOrder;\r\n  const allNodesInShortestPathOrder = nodesInShortestPathOrder;\r\n  dispatch(setIsNavbarClickable(false));\r\n  animateResult(\r\n    dispatch,\r\n    allVisitedNodesInOrder,\r\n    allNodesInShortestPathOrder,\r\n    totalNodesExplored,\r\n    animationSpeed\r\n  );\r\n};\r\n\r\nexport const visualizeMazeGeneration = (dispatch, nodes, mazeType) => {\r\n  dispatch(setIsNavbarClickable(false));\r\n  animateMazeGeneration(dispatch, nodes, mazeType);\r\n};\r\n\r\nconst animateMazeGeneration = (dispatch, nodes, mazeType) => {\r\n  for (let i = 0; i < nodes.length; i++) {\r\n    const node = nodes[i];\r\n    const row = node[0];\r\n    const col = node[1];\r\n\r\n    setTimeout(() => {\r\n      if (mazeType === 'wall') {\r\n        dispatch(setWallNode(row, col));\r\n      }\r\n      if (mazeType === 'weight') {\r\n        dispatch(setWeightNode(row, col));\r\n      }\r\n\r\n      if (i === nodes.length - 1) {\r\n        dispatch(setIsNavbarClickable(true));\r\n        clearTimeout();\r\n      }\r\n    }, mazeGenerationAnimationSpeed * i);\r\n  }\r\n};\r\n\r\nconst animateResult = (\r\n  dispatch,\r\n  allVisitedNodesInOrder,\r\n  allNodesInShortestPathOrder,\r\n  totalNodesExplored,\r\n  animationSpeed\r\n) => {\r\n  for (let i = 0; i <= allVisitedNodesInOrder.length; i++) {\r\n    if (i === allVisitedNodesInOrder.length) {\r\n      setTimeout(() => {\r\n        animateShortestPath(\r\n          dispatch,\r\n          allNodesInShortestPathOrder,\r\n          totalNodesExplored\r\n        );\r\n      }, animationSpeed * i);\r\n      return;\r\n    }\r\n\r\n    setTimeout(() => {\r\n      const node = allVisitedNodesInOrder[i];\r\n      if (node) {\r\n        const element = getElement(nodeName, node.row, node.col);\r\n        if (element === null) return;\r\n        element.className = VISITED_NODE_CLASSNAME;\r\n      }\r\n\r\n      return;\r\n    }, animationSpeed * i);\r\n  }\r\n};\r\n\r\nconst animateShortestPath = (dispatch, nodes, totalNodesExplored) => {\r\n  for (let i = 0; i <= nodes.length; i++) {\r\n    setTimeout(() => {\r\n      const node = nodes[i];\r\n      if (node) {\r\n        const element = getElement(nodeName, node.row, node.col);\r\n        if (element === null) return;\r\n        element.className = SHORTEST_PATH_CLASSNAME;\r\n      }\r\n\r\n      if (i === nodes.length - 1) {\r\n        dispatch(setIsNavbarClickable(true));\r\n        dispatch(setTotalNodesExplored(totalNodesExplored));\r\n        clearTimeout();\r\n      }\r\n    }, 50 * i * 2);\r\n  }\r\n};\r\n\r\nconst getElement = (nodeName, row, col) =>\r\n  document.getElementById(`${nodeName}-${row}-${col}`);\r\n","export const availablePathFindingAlgorithms = [\r\n  {\r\n    value: 'astar',\r\n    label: 'A* Search',\r\n    description: 'A* Search is 𝐰𝐞𝐢𝐠𝐡𝐭𝐞𝐝 and 𝐠𝐮𝐚𝐫𝐚𝐧𝐭𝐞𝐞𝐬 the shortest path!',\r\n    isWeight: true,\r\n  },\r\n  {\r\n    value: 'dijkstra',\r\n    label: \"Dijkstra's Search\",\r\n    description:\r\n      \"Dijkstra's Algorithm is 𝐰𝐞𝐢𝐠𝐡𝐭𝐞𝐝 and 𝐠𝐮𝐚𝐫𝐚𝐧𝐭𝐞𝐞𝐬 the shortest path!\",\r\n    isWeight: true,\r\n  },\r\n  {\r\n    value: 'bfs',\r\n    label: 'Breadth-first Search',\r\n    description:\r\n      'Breath-first Search is 𝐮𝐧𝐰𝐞𝐢𝐠𝐡𝐭𝐞𝐝 and 𝐠𝐮𝐚𝐫𝐚𝐧𝐭𝐞𝐞𝐬 the shortest path!',\r\n    isWeight: false,\r\n  },\r\n  {\r\n    value: 'dfs',\r\n    label: 'Depth-first Search',\r\n    description:\r\n      'Depth-first Search is 𝐮𝐧𝐰𝐞𝐢𝐠𝐡𝐭𝐞𝐝 and 𝐝𝐨𝐞𝐬 𝐧𝐨𝐭 𝐠𝐮𝐚𝐫𝐚𝐧𝐭𝐞𝐞 the shortest path!',\r\n    isWeight: false,\r\n  },\r\n];\r\n\r\nexport const MAZE_TYPES = [\r\n  {\r\n    label: 'Generate wall maze',\r\n    value: 'wall',\r\n  },\r\n  {\r\n    label: 'Generate weight maze',\r\n    value: 'weight',\r\n  },\r\n];\r\n\r\nexport const DEFAULT_ANIMATION = {\r\n  label: 'Average',\r\n  value: 20,\r\n};\r\n\r\nexport const ANIMATION_SPEEDS = [\r\n  {\r\n    label: 'Slow',\r\n    value: 120,\r\n  },\r\n  DEFAULT_ANIMATION,\r\n  {\r\n    label: 'Fast',\r\n    value: 10,\r\n  },\r\n];\r\n","import {\r\n  SHOW_ERROR_WITH_MESSAGE,\r\n  CLEAR_ERRORS\r\n} from '../../../constants/errorConstants';\r\nimport { initialState } from '../context';\r\n\r\nconst errorReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SHOW_ERROR_WITH_MESSAGE:\r\n      return {\r\n        ...state,\r\n        showError: true,\r\n        messages: action.payload\r\n      };\r\n    case CLEAR_ERRORS:\r\n      state = initialState;\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default errorReducer;\r\n","import React, { createContext, useReducer } from 'react';\r\nimport errorReducer from '../reducers';\r\n\r\nexport const initialState = {\r\n  messages: [],\r\n  showError: false\r\n};\r\n\r\nexport const ErrorContext = createContext();\r\n\r\nexport const ErrorProvider = props => {\r\n  const [state, dispatchError] = useReducer(errorReducer, initialState);\r\n  return (\r\n    <ErrorContext.Provider value={{ state, dispatchError }}>\r\n      {props.children}\r\n    </ErrorContext.Provider>\r\n  );\r\n};\r\n","import {\r\n  INITIALIZE_GRID,\r\n  SET_START_NODE,\r\n  SET_END_NODE,\r\n  SET_WEIGHT_NODE,\r\n  SET_WALL_NODE,\r\n  SET_ALGORITHM,\r\n  SET_ALGORITHM_DESCRIPTION,\r\n  CLEAR_STATE,\r\n  CLEAR_GRID,\r\n  REMOVE_WEIGHT_NODES,\r\n  SET_IS_NAVBAR_CLICKABLE,\r\n  SET_TOTAL_NODES_EXPLORED\r\n} from '../../../constants/gridConstants';\r\n\r\nimport {\r\n  getInitialGrid,\r\n  setStartNode,\r\n  setEndNode,\r\n  setWeightNode,\r\n  setWallNode,\r\n  removeAllWeightNodes,\r\n  clearGrid\r\n} from '../../../helpers/pathFindingAlgorithms/pathFindingHelper';\r\nimport { initialState } from '../context';\r\n\r\nlet isGridChanged = false;\r\n\r\nconst pathFindingAlgorithmsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case INITIALIZE_GRID:\r\n      return { ...state, grid: getInitialGrid(), isLoading: false };\r\n    case SET_IS_NAVBAR_CLICKABLE:\r\n      return { ...state, isNavbarClickable: action.payload };\r\n    case SET_START_NODE:\r\n      MarkGridAsChanged();\r\n\r\n      return {\r\n        ...state,\r\n        grid: setStartNode(state.grid, action.payload.row, action.payload.col),\r\n        startNode: {\r\n          row: action.payload.row,\r\n          col: action.payload.col,\r\n          isStart: true\r\n        }\r\n      };\r\n    case SET_END_NODE:\r\n      MarkGridAsChanged();\r\n\r\n      return {\r\n        ...state,\r\n        grid: setEndNode(state.grid, action.payload.row, action.payload.col),\r\n        endNode: {\r\n          row: action.payload.row,\r\n          col: action.payload.col,\r\n          isEnd: false\r\n        }\r\n      };\r\n    case SET_WEIGHT_NODE:\r\n      MarkGridAsChanged();\r\n\r\n      return {\r\n        ...state,\r\n        grid: setWeightNode(state.grid, action.payload.row, action.payload.col)\r\n      };\r\n    case SET_WALL_NODE:\r\n      MarkGridAsChanged();\r\n\r\n      return {\r\n        ...state,\r\n        grid: setWallNode(state.grid, action.payload.row, action.payload.col)\r\n      };\r\n    case SET_TOTAL_NODES_EXPLORED:\r\n      return {\r\n        ...state,\r\n        totalNodesExplored: action.payload\r\n      };\r\n    case SET_ALGORITHM:\r\n      const algorithm = state.algorithms.find(\r\n        el => el.value === action.payload\r\n      );\r\n      if (!algorithm || state.algorithm === action.payload) return state;\r\n\r\n      return {\r\n        ...state,\r\n        algorithm: action.payload,\r\n        isWeightNodeAllowed: algorithm.isWeight\r\n      };\r\n    case SET_ALGORITHM_DESCRIPTION:\r\n      if (!action.payload || state.algorithm === action.payload) return state;\r\n      return { ...state, algorithmDescription: action.payload };\r\n    case CLEAR_STATE:\r\n      if (!isGridChanged) return state;\r\n\r\n      state = initialState;\r\n      isGridChanged = false;\r\n      clearGrid();\r\n\r\n      return {\r\n        ...state,\r\n        grid: getInitialGrid(),\r\n        isLoading: false\r\n      };\r\n    case CLEAR_GRID:\r\n      if (state.grid.length === 0) return state;\r\n      MarkGridAsChanged();\r\n      clearGrid();\r\n      return state;\r\n    case REMOVE_WEIGHT_NODES:\r\n      let newGrid = removeAllWeightNodes(state.grid);\r\n      return {\r\n        ...state,\r\n        grid: newGrid\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n\r\n  function MarkGridAsChanged() {\r\n    if (!isGridChanged) {\r\n      isGridChanged = true;\r\n    }\r\n  }\r\n};\r\n\r\nexport default pathFindingAlgorithmsReducer;\r\n","import React, { createContext, useReducer } from 'react';\r\nimport pathFindingAlgorithmsReducer from '../reducers';\r\nimport {\r\n  START_NODE_ROW,\r\n  START_NODE_COL,\r\n  END_NODE_ROW,\r\n  END_NODE_COL,\r\n  TOTAL_NODES_EXPLORED_DEFAULT_VALUE\r\n} from '../../../constants/gridConstants';\r\nimport { availablePathFindingAlgorithms } from '../../../constants/pathfindingAlgorithms';\r\n\r\nexport const initialState = {\r\n  isLoading: true,\r\n  isNavbarClickable: true,\r\n  grid: [],\r\n  totalNodesExplored: TOTAL_NODES_EXPLORED_DEFAULT_VALUE,\r\n  algorithms: availablePathFindingAlgorithms,\r\n  algorithm: '',\r\n  algorithmDescription: '',\r\n  isWeightNodeAllowed: true,\r\n  startNode: { row: START_NODE_ROW, col: START_NODE_COL, isStart: true },\r\n  endNode: { row: END_NODE_ROW, col: END_NODE_COL, isEnd: true }\r\n};\r\n\r\nexport const PathFindingAlgorithmsContext = createContext();\r\n\r\nexport const PathFindingAlgorithmsProvider = props => {\r\n  const [state, dispatch] = useReducer(\r\n    pathFindingAlgorithmsReducer,\r\n    initialState\r\n  );\r\n  return (\r\n    <PathFindingAlgorithmsContext.Provider value={{ state, dispatch }}>\r\n      {props.children}\r\n    </PathFindingAlgorithmsContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext, Fragment, useState } from 'react';\r\nimport {\r\n  Navbar,\r\n  NavDropdown,\r\n  Nav,\r\n  NavItem,\r\n  Button,\r\n  ButtonToolbar,\r\n  Spinner,\r\n} from 'react-bootstrap';\r\nimport { NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { makePostApiCallAsync } from '../../../helpers/fetchData';\r\nimport {\r\n  visualizeResult,\r\n  visualizeMazeGeneration,\r\n} from '../../../helpers/pathFindingAlgorithms/dataVisualizer';\r\nimport {\r\n  MAZE_TYPES,\r\n  DEFAULT_ANIMATION_SPEED_VALUE,\r\n  ANIMATION_SPEEDS,\r\n  DEFAULT_ANIMATION,\r\n} from '../../../constants/pathfindingAlgorithms';\r\nimport { DEFAULT_ERROR_MESSAGE } from '../../../constants/errorConstants';\r\n\r\nimport {\r\n  setAlgorithm,\r\n  setAlgorithmDescription,\r\n  clearState,\r\n  setIsNavbarClickable,\r\n  clearGrid,\r\n  setTotalNodesExplored,\r\n} from '../../../store/pathFindingAlgorithms/actions';\r\nimport { showError, clearErrors } from '../../../store/error/actions';\r\nimport { ErrorContext } from '../../../store/error/context';\r\nimport { PathFindingAlgorithmsContext } from '../../../store/pathFindingAlgorithms/context';\r\nimport { TOTAL_NODES_EXPLORED_DEFAULT_VALUE } from '../../../constants/gridConstants';\r\nimport {\r\n  MAZE_API_URL,\r\n  PATHFINDING_ALGORITHMS_API_URL,\r\n} from '../../../constants/apiConstants';\r\n\r\nimport './index.css';\r\n\r\nexport const PathfindingAlgorithmsNavbar = () => {\r\n  const { state, dispatch } = useContext(PathFindingAlgorithmsContext);\r\n  const { dispatchError } = useContext(ErrorContext);\r\n  const [animationSpeed, setAnimationSpeed] = useState(DEFAULT_ANIMATION);\r\n  const [showAlgorithmsMenu, setShowAlgorithmsMenu] = useState(false);\r\n  const [showMazesMenu, setShowMazesMenu] = useState(false);\r\n  const [showAnimationSpeed, setShowAnimationSpeed] = useState(false);\r\n\r\n  const handleOnClick = (algorithm, algorithmDescription) => {\r\n    if (!state.isNavbarClickable) return;\r\n    dispatch(setTotalNodesExplored(TOTAL_NODES_EXPLORED_DEFAULT_VALUE));\r\n    dispatch(setAlgorithm(algorithm));\r\n    dispatch(setAlgorithmDescription(algorithmDescription));\r\n  };\r\n\r\n  const handleMazeGeneration = async (grid, mazeType) => {\r\n    if (!state.isNavbarClickable) return;\r\n\r\n    dispatch(clearState());\r\n    dispatchError(clearErrors());\r\n\r\n    const url = `${MAZE_API_URL}/${mazeType}`;\r\n    dispatch(setIsNavbarClickable(false));\r\n\r\n    const data = JSON.stringify({\r\n      grid,\r\n    });\r\n\r\n    const result = await makePostApiCallAsync(url, data, dispatchError);\r\n    dispatch(setIsNavbarClickable(true));\r\n\r\n    if (result) {\r\n      if (result.isSuccess === undefined && result.status === 400) {\r\n        dispatchError(showError([DEFAULT_ERROR_MESSAGE]));\r\n        return;\r\n      }\r\n\r\n      visualizeMazeGeneration(dispatch, result, mazeType);\r\n    }\r\n  };\r\n\r\n  const fetchData = async (algorithm, startNode, endNode, grid) => {\r\n    if (!state.isNavbarClickable) return;\r\n\r\n    dispatch(clearGrid());\r\n    dispatch(setTotalNodesExplored(TOTAL_NODES_EXPLORED_DEFAULT_VALUE));\r\n    dispatchError(clearErrors());\r\n\r\n    const url = `${PATHFINDING_ALGORITHMS_API_URL}/${algorithm}`;\r\n    dispatch(setIsNavbarClickable(false));\r\n\r\n    const data = JSON.stringify({\r\n      startNode: startNode,\r\n      endNode: endNode,\r\n      grid: grid,\r\n    });\r\n\r\n    const result = await makePostApiCallAsync(url, data, dispatchError);\r\n\r\n    dispatch(setIsNavbarClickable(true));\r\n\r\n    if (result) {\r\n      if (result.isSuccess !== undefined && !result.isSuccess) {\r\n        dispatchError(showError(result.messages));\r\n        return;\r\n      }\r\n      const allVisitedNodesInOrder = result.allVisitedNodesInOrder;\r\n      const allNodesInShortestPathOrder = result.allNodesInShortestPathOrder;\r\n\r\n      visualizeResult(\r\n        dispatch,\r\n        allVisitedNodesInOrder,\r\n        allNodesInShortestPathOrder,\r\n        result.totalNodesExplored,\r\n        animationSpeed.value\r\n      );\r\n    }\r\n  };\r\n\r\n  const isClickable = () => (!state.isNavbarClickable ? 'disabled' : '');\r\n\r\n  return (\r\n    <Navbar\r\n      className=\"navbar-expand-sm navbar-toggleable-sm ng-white justify-content-between border-bottom box-shadow mb-3\"\r\n      bg=\"dark\"\r\n      expand=\"lg\"\r\n    >\r\n      <Navbar.Brand className={!state.isNavbarClickable ? 'disabled' : ''}>\r\n        <NavLink tag={Link} className=\"text-white\" to=\"/\">\r\n          AlgoVisualizer\r\n        </NavLink>\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle className=\"bg-white\" aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"w-50\">\r\n          <NavItem className={isClickable()}>\r\n            <NavLink tag={Link} className=\"text-white\" to=\"/\">\r\n              Home\r\n            </NavLink>\r\n          </NavItem>\r\n          <NavDropdown\r\n            className={isClickable()}\r\n            id=\"basic-nav-dropdown\"\r\n            onMouseOver={() => setShowAlgorithmsMenu(true)}\r\n            onMouseLeave={() => setShowAlgorithmsMenu(false)}\r\n            show={showAlgorithmsMenu}\r\n            title={<span className=\"text-white\">Algorithms</span>}\r\n            noCaret\r\n          >\r\n            {state.algorithms.map((currentElement, index) => {\r\n              return (\r\n                <NavDropdown.Item\r\n                  key={index}\r\n                  onClick={() =>\r\n                    handleOnClick(\r\n                      currentElement.value,\r\n                      currentElement.description\r\n                    )\r\n                  }\r\n                >\r\n                  {currentElement.label}\r\n                </NavDropdown.Item>\r\n              );\r\n            })}\r\n          </NavDropdown>\r\n          <NavDropdown\r\n            className={isClickable()}\r\n            id=\"basic-nav-dropdown-2\"\r\n            title={<span className=\"text-white\">Mazes</span>}\r\n            onMouseOver={() => setShowMazesMenu(true)}\r\n            onMouseLeave={() => setShowMazesMenu(false)}\r\n            show={showMazesMenu}\r\n          >\r\n            {MAZE_TYPES.map((currentElement, index) => {\r\n              return (\r\n                <NavDropdown.Item\r\n                  key={index}\r\n                  onClick={() =>\r\n                    handleMazeGeneration(state.grid, currentElement.value)\r\n                  }\r\n                >\r\n                  {currentElement.label}\r\n                </NavDropdown.Item>\r\n              );\r\n            })}\r\n          </NavDropdown>\r\n        </Nav>\r\n        <NavItem className=\"w-25 mb-2\">\r\n          {state.algorithm !== '' ? (\r\n            <ButtonToolbar>\r\n              <Button\r\n                className={isClickable()}\r\n                variant=\"primary\"\r\n                onClick={() =>\r\n                  fetchData(\r\n                    state.algorithm,\r\n                    state.startNode,\r\n                    state.endNode,\r\n                    state.grid\r\n                  )\r\n                }\r\n              >\r\n                {!state.isNavbarClickable ? (\r\n                  <Fragment>\r\n                    <Spinner\r\n                      as=\"span\"\r\n                      animation=\"grow\"\r\n                      size=\"sm\"\r\n                      role=\"status\"\r\n                      aria-hidden=\"true\"\r\n                    />\r\n                    Loading...\r\n                  </Fragment>\r\n                ) : (\r\n                  `Visualize ${state.algorithm}`\r\n                )}\r\n              </Button>\r\n            </ButtonToolbar>\r\n          ) : (\r\n            ''\r\n          )}\r\n        </NavItem>\r\n        <Nav className=\"w-50\">\r\n          <div className=\"ml-sm-auto\">\r\n            <NavDropdown\r\n              id=\"nav-dropdown\"\r\n              className={isClickable()}\r\n              title={\r\n                <span className=\"text-white\">\r\n                  Animation speed: {animationSpeed.label}\r\n                </span>\r\n              }\r\n              onMouseOver={() => setShowAnimationSpeed(true)}\r\n              onMouseLeave={() => setShowAnimationSpeed(false)}\r\n              show={showAnimationSpeed}\r\n            >\r\n              {ANIMATION_SPEEDS.map((currentElement, index) => {\r\n                return (\r\n                  <NavDropdown.Item\r\n                    key={index}\r\n                    onClick={() => setAnimationSpeed(currentElement)}\r\n                  >\r\n                    {currentElement.label}\r\n                  </NavDropdown.Item>\r\n                );\r\n              })}\r\n            </NavDropdown>\r\n          </div>\r\n          <Button\r\n            className={isClickable()}\r\n            variant=\"danger\"\r\n            onClick={() =>\r\n              state.isNavbarClickable ? dispatch(clearState()) : null\r\n            }\r\n          >\r\n            Clear board\r\n          </Button>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n","export const PATHFINDING_ALGORITHMS_API_URL =\r\n  'https://algorithmvisualizerapi.azurewebsites.net/api/pathfinding';\r\n\r\nexport const SORTING_ALGORITHMS_API_URL =\r\n  'https://algorithmvisualizerapi.azurewebsites.net/api/sortingAlgorithms';\r\n\r\nexport const MAZE_API_URL =\r\n  'https://algorithmvisualizerapi.azurewebsites.net/api/maze';\r\n","import React, { useContext } from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { ErrorContext } from '../../store/error/context';\r\nimport { clearErrors } from '../../store/error/actions';\r\n\r\nexport const Error = () => {\r\n  const { state, dispatchError } = useContext(ErrorContext);\r\n\r\n  return state.showError ? (\r\n    <Alert\r\n      className=\"ml-3 mr-3\"\r\n      variant=\"danger\"\r\n      onClose={() => dispatchError(clearErrors())}\r\n      dismissible\r\n    >\r\n      <Alert.Heading>Oh snap!</Alert.Heading>\r\n      {state.messages.length === 1 ? (\r\n        <p>{state.messages[0]}</p>\r\n      ) : (\r\n        state.messages.map((element, i) => <p key={i}>{element}</p>)\r\n      )}\r\n    </Alert>\r\n  ) : null;\r\n};\r\n","import React, { Fragment } from 'react';\r\nimport './index.css';\r\nimport { PathfindingAlgorithmsNavbar } from '../Nav';\r\nimport { Error } from '../../Error';\r\nimport { PathFindingAlgorithmsProvider } from '../../../store/pathFindingAlgorithms/context';\r\nimport { ErrorProvider } from '../../../store/error/context';\r\n\r\nexport const PathFindingAlgorithmsLayout = props => {\r\n  return (\r\n    <PathFindingAlgorithmsProvider>\r\n      <ErrorProvider>\r\n        <Fragment>\r\n          <PathfindingAlgorithmsNavbar />\r\n          <Error />\r\n          <div className=\"main-grid\">{props.children}</div>\r\n        </Fragment>\r\n      </ErrorProvider>\r\n    </PathFindingAlgorithmsProvider>\r\n  );\r\n};\r\n","import {\r\n  INITIALIZE_CHART_DATA,\r\n  GENERATE_NEW_ARRAY,\r\n  SET_IS_NAVBAR_CLICKABLE,\r\n  SET_BAR_CHART_ELEMENT_BACKGROUND_COLOR,\r\n  SET_TOTAL_SWAPS\r\n} from '../../../constants/sortingAlgorithmsConstants';\r\n\r\nexport const initializeChartData = () => {\r\n  return {\r\n    type: INITIALIZE_CHART_DATA\r\n  };\r\n};\r\n\r\nexport const generateNewArray = () => {\r\n  return {\r\n    type: GENERATE_NEW_ARRAY\r\n  };\r\n};\r\n\r\nexport const setIsNavbarClickable = isClickable => {\r\n  return {\r\n    type: SET_IS_NAVBAR_CLICKABLE,\r\n    payload: isClickable\r\n  };\r\n};\r\n\r\nexport const setTotalSwaps = value => {\r\n  return {\r\n    type: SET_TOTAL_SWAPS,\r\n    payload: value\r\n  };\r\n};\r\n\r\nexport const setBarChartElementBackgroundColor = (elementsIndexes, color) => {\r\n  return {\r\n    type: SET_BAR_CHART_ELEMENT_BACKGROUND_COLOR,\r\n    payload: { elementsIndexes, color }\r\n  };\r\n};\r\n","export const INITIALIZE_CHART_DATA = 'INITIALIZE_CHART_DATA';\r\nexport const GENERATE_NEW_ARRAY = 'GENERATE_NEW_ARRAY';\r\nexport const SET_IS_NAVBAR_CLICKABLE = 'SET_IS_NAVBAR_CLICKABLE';\r\n\r\nexport const BAR_CHART_DEFAULT_BACKGROUND_COLOR = 'rgba(255,99,132,0.2)';\r\nexport const MARKED_ELEMENT_BACKGROUND_COLOR = 'yellow';\r\n\r\nexport const SET_BAR_CHART_ELEMENT_BACKGROUND_COLOR =\r\n  'SET_BAR_CHART_ELEMENT_BACKGROUND_COLOR';\r\n\r\nexport const SET_TOTAL_SWAPS = 'SET_TOTAL_SWAPS';\r\nexport const TOTAL_SWAPS_DEFAULT_VALUE = 0;\r\n\r\nexport const availableSortingAlgorithms = [\r\n  {\r\n    value: 'mergesort',\r\n    label: 'Merge sort'\r\n  },\r\n  {\r\n    value: 'bubblesort',\r\n    label: 'Bubble Sort'\r\n  },\r\n  {\r\n    value: 'heapsort',\r\n    label: 'Heap Sort'\r\n  },\r\n  {\r\n    value: 'quicksort',\r\n    label: 'Quick Sort'\r\n  },\r\n  {\r\n    value: 'selectionsort',\r\n    label: 'Selection Sort'\r\n  }\r\n];\r\n","import {\r\n  BAR_CHART_DEFAULT_BACKGROUND_COLOR,\r\n  MARKED_ELEMENT_BACKGROUND_COLOR\r\n} from '../constants/sortingAlgorithmsConstants';\r\nimport {\r\n  setBarChartElementBackgroundColor,\r\n  setIsNavbarClickable\r\n} from '../store/sortingAlgorithms/actions';\r\n\r\nconst arraySize = 20;\r\nconst randomMultiplyingFactor = 300;\r\n\r\nexport const getInitialChart = () => {\r\n  const barChart = {\r\n    labels: [],\r\n    dataset: {\r\n      backgroundColor: [],\r\n      data: []\r\n    }\r\n  };\r\n\r\n  const dataSet = barChart.dataset;\r\n  for (let i = 0; i <= arraySize; i++) {\r\n    const number = Math.floor(Math.random() * randomMultiplyingFactor);\r\n    dataSet.backgroundColor.push(BAR_CHART_DEFAULT_BACKGROUND_COLOR);\r\n    barChart.labels.push(number);\r\n    dataSet.data.push(number);\r\n  }\r\n\r\n  return barChart;\r\n};\r\n\r\nexport const generateNewChart = data => {\r\n  const dataSet = data.datasets[0];\r\n  for (let i = 0; i <= arraySize; i++) {\r\n    const number = Math.floor(Math.random() * randomMultiplyingFactor);\r\n    data.labels[i] = number;\r\n    dataSet.data[i] = number;\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\nexport const setBackgroundColorToChartElements = (\r\n  barChart,\r\n  elements,\r\n  color\r\n) => {\r\n  const dataSet = barChart.datasets[0];\r\n  for (let i = 0; i < elements.length; i++) {\r\n    dataSet.backgroundColor[elements[i]] = color;\r\n  }\r\n  return barChart.backgroundColor;\r\n};\r\n\r\nexport const visualizeArrayElementsSwapping = async (\r\n  dispatch,\r\n  barChart,\r\n  swappingIndexes\r\n) => {\r\n  const timeOutMs = 500;\r\n\r\n  dispatch(setIsNavbarClickable(false));\r\n\r\n  for (let i = 0; i < swappingIndexes.length; i++) {\r\n    const element = swappingIndexes[i];\r\n    const firstIndex = element[0];\r\n    const secondIndex = element[1];\r\n\r\n    await Promise.all([\r\n      dispatch(\r\n        setBarChartElementBackgroundColor(\r\n          [firstIndex, secondIndex],\r\n          MARKED_ELEMENT_BACKGROUND_COLOR\r\n        )\r\n      ),\r\n      timeout(timeOutMs)\r\n    ]);\r\n\r\n    await Promise.all([\r\n      swapElements(barChart, firstIndex, secondIndex),\r\n      timeout(250)\r\n    ]);\r\n\r\n    await Promise.all([\r\n      dispatch(\r\n        setBarChartElementBackgroundColor(\r\n          [firstIndex, secondIndex],\r\n          BAR_CHART_DEFAULT_BACKGROUND_COLOR\r\n        )\r\n      ),\r\n      timeout(timeOutMs)\r\n    ]);\r\n\r\n    if (i === swappingIndexes.length - 1) {\r\n      dispatch(setIsNavbarClickable(true));\r\n    }\r\n  }\r\n};\r\n\r\nconst timeout = ms => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n\r\nconst swapElements = (barChart, firstIndex, secondIndex) => {\r\n  const dataSet = barChart.datasets[0];\r\n\r\n  const temp = barChart.labels[firstIndex];\r\n\r\n  const secondElement = barChart.labels[secondIndex];\r\n  barChart.labels[firstIndex] = secondElement;\r\n  dataSet.data[firstIndex] = secondElement;\r\n\r\n  barChart.labels[secondIndex] = temp;\r\n  dataSet.data[secondIndex] = temp;\r\n};\r\n","import { initialState } from '../context';\r\nimport {\r\n  INITIALIZE_CHART_DATA,\r\n  GENERATE_NEW_ARRAY,\r\n  SET_IS_NAVBAR_CLICKABLE,\r\n  SET_BAR_CHART_ELEMENT_BACKGROUND_COLOR,\r\n  SET_TOTAL_SWAPS\r\n} from '../../../constants/sortingAlgorithmsConstants';\r\nimport {\r\n  getInitialChart,\r\n  generateNewChart,\r\n  setBackgroundColorToChartElements\r\n} from '../../../helpers/sortingAlgorithmsHelper';\r\n\r\nconst sortingAlgorithmsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case INITIALIZE_CHART_DATA:\r\n      const newChart = getInitialChart();\r\n      const oldDataSet = state.barChart.datasets[0];\r\n      return {\r\n        ...state,\r\n        barChart: {\r\n          ...state.barChart,\r\n          labels: newChart.labels,\r\n          datasets: [\r\n            {\r\n              ...oldDataSet,\r\n              data: newChart.dataset.data,\r\n              backgroundColor: newChart.dataset.backgroundColor\r\n            }\r\n          ]\r\n        },\r\n        isLoading: false\r\n      };\r\n    case GENERATE_NEW_ARRAY:\r\n      const data = state.barChart;\r\n      return {\r\n        ...state,\r\n        barChart: Object.assign({}, data, {\r\n          data: generateNewChart(data)\r\n        })\r\n      };\r\n    case SET_IS_NAVBAR_CLICKABLE:\r\n      return {\r\n        ...state,\r\n        isNavbarClickable: action.payload\r\n      };\r\n    case SET_TOTAL_SWAPS:\r\n      return { ...state, totalSwaps: action.payload };\r\n    case SET_BAR_CHART_ELEMENT_BACKGROUND_COLOR:\r\n      const barChart = state.barChart;\r\n      return {\r\n        ...state,\r\n        barChart: Object.assign({}, barChart, {\r\n          backgroundColor: Object.assign({}, barChart.backgroundColor, {\r\n            backgroundColor: setBackgroundColorToChartElements(\r\n              barChart,\r\n              action.payload.elementsIndexes,\r\n              action.payload.color\r\n            )\r\n          })\r\n        })\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default sortingAlgorithmsReducer;\r\n","import React, { createContext, useReducer } from 'react';\r\nimport sortingAlgorithmsReducer from '../reducers';\r\nimport {\r\n  TOTAL_SWAPS_DEFAULT_VALUE,\r\n  availableSortingAlgorithms\r\n} from '../../../constants/sortingAlgorithmsConstants';\r\n\r\nexport const initialState = {\r\n  isLoading: true,\r\n  isNavbarClickable: true,\r\n  algorithms: availableSortingAlgorithms,\r\n  totalSwaps: TOTAL_SWAPS_DEFAULT_VALUE,\r\n  barChart: {\r\n    labels: [],\r\n    datasets: [\r\n      {\r\n        label: 'Value',\r\n        backgroundColor: [],\r\n        borderColor: 'rgba(255,99,132,1)',\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n        hoverBorderColor: 'rgba(255,99,132,1)',\r\n        data: []\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\nexport const SortingAlgorithmsContext = createContext();\r\n\r\nexport const SortingAlgorithmsProvider = props => {\r\n  const [state, dispatch] = useReducer(sortingAlgorithmsReducer, initialState);\r\n  return (\r\n    <SortingAlgorithmsContext.Provider value={{ state, dispatch }}>\r\n      {props.children}\r\n    </SortingAlgorithmsContext.Provider>\r\n  );\r\n};\r\n","import React, { Fragment, useState, useContext } from 'react';\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  NavItem,\r\n  Button,\r\n  NavDropdown,\r\n  ButtonToolbar,\r\n  Spinner\r\n} from 'react-bootstrap';\r\nimport { NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { SortingAlgorithmsContext } from '../../../store/sortingAlgorithms/context';\r\nimport {\r\n  generateNewArray,\r\n  setIsNavbarClickable,\r\n  setTotalSwaps\r\n} from '../../../store/sortingAlgorithms/actions';\r\nimport { ErrorContext } from '../../../store/error/context';\r\nimport { clearErrors, showError } from '../../../store/error/actions';\r\nimport { makePostApiCallAsync } from '../../../helpers/fetchData';\r\nimport { visualizeArrayElementsSwapping } from '../../../helpers/sortingAlgorithmsHelper';\r\nimport { TOTAL_SWAPS_DEFAULT_VALUE } from '../../../constants/sortingAlgorithmsConstants';\r\nimport { SORTING_ALGORITHMS_API_URL } from '../../../constants/apiConstants';\r\n\r\nexport const SortingAlgorithmsNavbar = () => {\r\n  const [algorithm, setAlgorithm] = useState('');\r\n  const { state, dispatch } = useContext(SortingAlgorithmsContext);\r\n  const { dispatchError } = useContext(ErrorContext);\r\n  const [showAlgorithmsMenu, setShowAlgorithmsMenu] = useState(false);\r\n\r\n  const fetchData = async () => {\r\n    dispatchError(clearErrors());\r\n    dispatch(setTotalSwaps(TOTAL_SWAPS_DEFAULT_VALUE));\r\n\r\n    const url = `${SORTING_ALGORITHMS_API_URL}/${algorithm.value}`;\r\n    dispatch(setIsNavbarClickable(false));\r\n\r\n    const data = JSON.stringify({\r\n      Array: state.barChart.labels\r\n    });\r\n\r\n    const result = await makePostApiCallAsync(url, data, dispatchError);\r\n    dispatch(setIsNavbarClickable(true));\r\n\r\n    if (result) {\r\n      if (result.isSuccess !== undefined && !result.isSuccess) {\r\n        dispatchError(showError(result.messages));\r\n        return;\r\n      }\r\n\r\n      await visualizeArrayElementsSwapping(\r\n        dispatch,\r\n        state.barChart,\r\n        result.swapIndexes\r\n      );\r\n      dispatch(setTotalSwaps(result.totalSwaps));\r\n    }\r\n  };\r\n\r\n  const isClickable = () => (!state.isNavbarClickable ? 'disabled' : '');\r\n\r\n  const handleNewArrayGeneration = () => {\r\n    if (state.isNavbarClickable) {\r\n      dispatch(generateNewArray());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Navbar\r\n        className=\"navbar-expand-sm navbar-toggleable-sm ng-white justify-content-between border-bottom box-shadow mb-3\"\r\n        bg=\"dark\"\r\n        expand=\"lg\"\r\n      >\r\n        <Navbar.Brand className={isClickable()}>\r\n          <NavLink tag={Link} className=\"text-white\" to=\"/\">\r\n            AlgoVisualizer\r\n          </NavLink>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle className=\"bg-white\" aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"w-50\">\r\n            <NavItem className={isClickable()}>\r\n              <NavLink tag={Link} className=\"text-white\" to=\"/\">\r\n                Home\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavDropdown\r\n              id=\"basic-nav-dropdown\"\r\n              className={isClickable()}\r\n              title={<span className=\"text-white\">Algorithms</span>}\r\n              onMouseOver={() => setShowAlgorithmsMenu(true)}\r\n              onMouseLeave={() => setShowAlgorithmsMenu(false)}\r\n              show={showAlgorithmsMenu}\r\n            >\r\n              {state.algorithms.map((currentElement, index) => {\r\n                return (\r\n                  <NavDropdown.Item\r\n                    key={index}\r\n                    onClick={() => setAlgorithm(currentElement)}\r\n                  >\r\n                    {currentElement.label}\r\n                  </NavDropdown.Item>\r\n                );\r\n              })}\r\n            </NavDropdown>\r\n          </Nav>\r\n          <NavItem className=\"w-25 mb-2\">\r\n            {algorithm !== '' ? (\r\n              <ButtonToolbar>\r\n                <Button\r\n                  className={isClickable()}\r\n                  variant=\"primary\"\r\n                  onClick={() => fetchData()}\r\n                >\r\n                  {!state.isNavbarClickable ? (\r\n                    <Fragment>\r\n                      <Spinner\r\n                        as=\"span\"\r\n                        animation=\"grow\"\r\n                        size=\"sm\"\r\n                        role=\"status\"\r\n                        aria-hidden=\"true\"\r\n                      />\r\n                      Visualizing {algorithm.label} ...\r\n                    </Fragment>\r\n                  ) : (\r\n                    `Visualize ${algorithm.label}`\r\n                  )}\r\n                </Button>\r\n              </ButtonToolbar>\r\n            ) : (\r\n              ''\r\n            )}\r\n          </NavItem>\r\n          <Nav className=\"w-50\">\r\n            <div className=\"ml-sm-auto\">\r\n              <NavItem>\r\n                <Button\r\n                  className={isClickable()}\r\n                  variant=\"outline-danger\"\r\n                  onClick={() => handleNewArrayGeneration()}\r\n                >\r\n                  Generate New Data (Array)\r\n                </Button>\r\n              </NavItem>\r\n            </div>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </Fragment>\r\n  );\r\n};\r\n","import React, { Fragment } from 'react';\r\nimport { SortingAlgorithmsProvider } from '../../../store/sortingAlgorithms/context';\r\nimport { ErrorProvider } from '../../../store/error/context';\r\nimport { Error } from '../../Error';\r\nimport { SortingAlgorithmsNavbar } from '../NavBar';\r\n\r\nexport const SortingAlgorithmsLayout = props => {\r\n  return (\r\n    <SortingAlgorithmsProvider>\r\n      <ErrorProvider>\r\n        <Fragment>\r\n          <SortingAlgorithmsNavbar />\r\n          <Error />\r\n          <div className=\"main-grid\">{props.children}</div>\r\n        </Fragment>\r\n      </ErrorProvider>\r\n    </SortingAlgorithmsProvider>\r\n  );\r\n};\r\n","import React, { useContext, useEffect, Fragment } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { SortingAlgorithmsContext } from '../../store/sortingAlgorithms/context';\r\nimport { initializeChartData } from '../../store/sortingAlgorithms/actions';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nexport const SortingAlgorithmsContainer = () => {\r\n  const { state, dispatch } = useContext(SortingAlgorithmsContext);\r\n  useEffect(() => {\r\n    dispatch(initializeChartData());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Fragment>\r\n      {state.totalSwaps !== 0 ? (\r\n        <div className=\"d-flex pb-3 justify-content-center\">\r\n          <p className=\"mr-1\">Total swaps:</p>\r\n          <p>{state.totalSwaps}</p>\r\n        </div>\r\n      ) : (\r\n        ''\r\n      )}\r\n      {state.isLoading ? (\r\n        <div className=\"text-center\">\r\n          <Spinner animation=\"border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <Bar data={state.barChart} height=\"100%\" />\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Container,\r\n  Navbar,\r\n  NavbarBrand,\r\n  NavbarToggler,\r\n  NavItem,\r\n  NavLink\r\n} from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './index.css';\r\n\r\nexport const NavMenu = () => {\r\n  const [collapsed, setCollapsed] = useState(true);\r\n\r\n  const toggleNavbar = () => {\r\n    setCollapsed(!collapsed);\r\n  };\r\n\r\n  return (\r\n    <header>\r\n      <Navbar\r\n        className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\"\r\n        light\r\n      >\r\n        <Container>\r\n          <NavbarBrand tag={Link} to=\"/\">\r\n            AlgoVisualizer\r\n          </NavbarBrand>\r\n          <NavbarToggler onClick={() => toggleNavbar()} className=\"mr-2\" />\r\n          <Collapse\r\n            className=\"d-sm-inline-flex flex-sm-row-reverse\"\r\n            isOpen={!collapsed}\r\n            navbar\r\n          >\r\n            <ul className=\"navbar-nav flex-grow\">\r\n              <NavItem>\r\n                <NavLink tag={Link} className=\"text-dark\" to=\"/\">\r\n                  Home\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  tag={Link}\r\n                  className=\"text-dark\"\r\n                  to=\"/pathfindingAlgorithms\"\r\n                >\r\n                  Pathfinding algorithms\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  tag={Link}\r\n                  className=\"text-dark\"\r\n                  to=\"/sortingAlgorithms\"\r\n                >\r\n                  Sorting algorithms\r\n                </NavLink>\r\n              </NavItem>\r\n            </ul>\r\n          </Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </header>\r\n  );\r\n};\r\n","import React, { Fragment } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport const MainLayout = props => {\r\n  return (\r\n    <Fragment>\r\n      <NavMenu />\r\n      <Container>{props.children}</Container>\r\n    </Fragment>\r\n  );\r\n};\r\n","import React, { Fragment } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { MainLayout } from './Home/Layout';\r\n\r\nexport const AppRoute = ({\r\n  component: Component,\r\n  layout: Layout = MainLayout,\r\n  ...rest\r\n}) => (\r\n  <Route\r\n    {...rest}\r\n    render={props => (\r\n      <Fragment>\r\n        {Layout !== null ? (\r\n          <Layout>\r\n            <Component {...props} />\r\n          </Layout>\r\n        ) : (\r\n          <Component {...props} />\r\n        )}\r\n      </Fragment>\r\n    )}\r\n  />\r\n);\r\n","import React from 'react';\r\nimport './index.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const NotFound = () => {\r\n  return (\r\n    <div id=\"notfound\">\r\n      <div class=\"notfound\">\r\n        <div class=\"notfound-404\">\r\n          <h1>\r\n            4<span>0</span>4\r\n          </h1>\r\n        </div>\r\n        <p>\r\n          The page you are looking for might have been removed, had its name\r\n          changed or is temporarily unavailable.\r\n        </p>\r\n        <Link to=\"/\">Home Page</Link>\r\n      </div>\r\n    </div>\r\n    // <!-- This template was made by Colorlib (https://colorlib.com) -->\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nexport const VerticallyCenteredModal = props => {\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable={true}\r\n    >\r\n      <Modal.Header closeButton={false}>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          {props.title}\r\n        </Modal.Title>\r\n\r\n        <div className=\"ml-auto\">\r\n          {props.currentPage}/{props.totalPages}\r\n        </div>\r\n      </Modal.Header>\r\n      <Modal.Body dangerouslySetInnerHTML={props.body} />\r\n      <Modal.Footer>\r\n        <div className=\"mr-auto\">\r\n          <Button onClick={props.onHide}>Skip tutorial</Button>\r\n        </div>\r\n        <Button onClick={props.previousPage}>Previous</Button>\r\n        {props.currentPage === props.totalPages ? (\r\n          <Button variant=\"success\" onClick={props.onHide}>\r\n            Finish\r\n          </Button>\r\n        ) : (\r\n          <Button onClick={props.nextPage}>Next</Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport './index.css';\r\n\r\nexport const Node = props => {\r\n  const { row, col, isStart, isEnd, isWall, isWeight } = props.node;\r\n  const extraClassName = isStart\r\n    ? 'node-start'\r\n    : isEnd\r\n    ? 'node-end'\r\n    : isWall\r\n    ? 'node-wall'\r\n    : '';\r\n\r\n  return (\r\n    <div\r\n      id={`node-${row}-${col}`}\r\n      className={extraClassName ? `node ${extraClassName}` : 'node'}\r\n      onClick={event => props.onClick(event, row, col)}\r\n      onMouseOver={event => props.onMouseOver(event, row, col)}\r\n      onMouseDown={props.onMouseDown}\r\n      onMouseUp={props.onMouseUp}\r\n    >\r\n      {isWeight ? <i className=\"node-dumbbell\" /> : ''}\r\n    </div>\r\n  );\r\n};\r\n","import React, { Fragment, useState, useContext } from 'react';\r\nimport { Node } from './Node';\r\nimport {\r\n  initializeGrid,\r\n  setStartNode,\r\n  setEndNode,\r\n  setWeightNode,\r\n  setWallNode,\r\n  removeWeightNodes\r\n} from '../../../store/pathFindingAlgorithms/actions';\r\n\r\nimport './index.css';\r\nimport { PathFindingAlgorithmsContext } from '../../../store/pathFindingAlgorithms/context';\r\nimport { useEffect } from 'react';\r\nimport { TOTAL_NODES_EXPLORED_DEFAULT_VALUE } from '../../../constants/gridConstants';\r\n\r\nconst ShiftKeyCode = 16;\r\nconst KeyDownEvent = 'keydown';\r\nconst KeyUpEvent = 'keyup';\r\n\r\nexport const Grid = () => {\r\n  const { state, dispatch } = useContext(PathFindingAlgorithmsContext);\r\n  const [isMouseStillClicked, setIsMouseStillClicked] = useState(false);\r\n  const [isShiftStillPressed, setIsShiftStillPressed] = useState(false);\r\n  const {\r\n    grid,\r\n    algorithmDescription,\r\n    isLoading,\r\n    isWeightNodeAllowed,\r\n    isNavbarClickable\r\n  } = state;\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(KeyDownEvent, handleKeyPress);\r\n    document.addEventListener(KeyUpEvent, handleKeyUp);\r\n    dispatch(initializeGrid());\r\n    return () => {\r\n      document.removeEventListener(KeyDownEvent, handleKeyPress);\r\n      document.removeEventListener(KeyUpEvent, handleKeyUp);\r\n    };\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (!isWeightNodeAllowed) {\r\n      dispatch(removeWeightNodes());\r\n    }\r\n  }, [isWeightNodeAllowed]);\r\n\r\n  const handleKeyPress = e => {\r\n    if (e.keyCode === ShiftKeyCode) {\r\n      setIsShiftStillPressed(true);\r\n    }\r\n  };\r\n\r\n  const handleKeyUp = e => {\r\n    if (e.keyCode === ShiftKeyCode) {\r\n      setIsShiftStillPressed(false);\r\n    }\r\n  };\r\n\r\n  const handleMouseDown = () => {\r\n    setIsMouseStillClicked(true);\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setIsMouseStillClicked(false);\r\n  };\r\n\r\n  const handleOnClick = (event, row, col) => {\r\n    if (isNavbarClickable) {\r\n      if (event) {\r\n        if (event.ctrlKey) {\r\n          dispatch(setStartNode(row, col));\r\n        }\r\n        if (event.altKey) {\r\n          dispatch(setEndNode(row, col));\r\n        }\r\n        if (isWeightNodeAllowed && event.shiftKey) {\r\n          dispatch(setWeightNode(row, col));\r\n        }\r\n      }\r\n      if (!event.shiftKey && !event.ctrlKey && !event.altKey) {\r\n        dispatch(setWallNode(row, col));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMouseOver = (event, row, col) => {\r\n    if (!isMouseStillClicked || !isNavbarClickable) return;\r\n    if (event && isWeightNodeAllowed && isShiftStillPressed) {\r\n      dispatch(setWeightNode(row, col));\r\n    } else {\r\n      dispatch(setWallNode(row, col));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div>\r\n        {state.totalNodesExplored !== TOTAL_NODES_EXPLORED_DEFAULT_VALUE ? (\r\n          <p className=\"text-center\">\r\n            Total nodes explored: <b>{state.totalNodesExplored}</b>\r\n          </p>\r\n        ) : (\r\n          <p className=\"text-center\">{algorithmDescription}</p>\r\n        )}\r\n      </div>\r\n\r\n      {isLoading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        <div className={!isNavbarClickable ? 'grid disabled' : 'grid'}>\r\n          {grid.map((row, rowIndex) => {\r\n            return (\r\n              <div id={`row-${rowIndex}`} key={rowIndex}>\r\n                {row.map((node, nodeIndex) => {\r\n                  return (\r\n                    <Node\r\n                      key={nodeIndex}\r\n                      node={node}\r\n                      onClick={(event, row, col) =>\r\n                        handleOnClick(event, row, col)\r\n                      }\r\n                      onMouseOver={(event, row, col) =>\r\n                        handleMouseOver(event, row, col)\r\n                      }\r\n                      onMouseDown={() => handleMouseDown()}\r\n                      onMouseUp={() => handleMouseUp()}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n","import React, { Fragment, useState, useEffect } from 'react';\r\nimport { VerticallyCenteredModal } from '../Modal/VerticallyCenteredModal';\r\nimport { modalTutorialContent } from '../../constants/gridConstants';\r\nimport { Grid } from './Grid';\r\n\r\nexport const PathFindingAlgorithmsContainer = () => {\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n\r\n  useEffect(() => {\r\n    setModalShow(true);\r\n  }, []);\r\n\r\n  return (\r\n    <Fragment>\r\n      {modalShow ? (\r\n        <VerticallyCenteredModal\r\n          show={modalShow}\r\n          title={modalTutorialContent[pageNumber - 1].title}\r\n          body={modalTutorialContent[pageNumber - 1].body}\r\n          onHide={() => setModalShow(false)}\r\n          previousPage={() =>\r\n            pageNumber > 1 ? setPageNumber(pageNumber - 1) : null\r\n          }\r\n          nextPage={() =>\r\n            pageNumber <= modalTutorialContent.length - 1\r\n              ? setPageNumber(pageNumber + 1)\r\n              : null\r\n          }\r\n          currentPage={pageNumber}\r\n          totalPages={modalTutorialContent.length}\r\n        />\r\n      ) : (\r\n        ''\r\n      )}\r\n      <div id=\"algo-legend\">\r\n        <ul>\r\n          <li>\r\n            <div className=\"node node-start\"></div>\r\n            Start Node\r\n          </li>\r\n          <li>\r\n            <div className=\"node node-end\"></div>\r\n            End Node\r\n          </li>\r\n          <li>\r\n            <div className=\"node node-wall\"></div>\r\n            Wall Node\r\n          </li>\r\n          <li>\r\n            <img\r\n              className=\"dumbbell\"\r\n              src=\"dumbbell-solid.svg\"\r\n              alt=\"weight-node\"\r\n            />\r\n            Weight Node\r\n          </li>\r\n          <li>\r\n            <div className=\"node\"></div>\r\n            Unvisited Node\r\n          </li>\r\n          <li>\r\n            <div className=\"node node-visited\"></div>\r\n            Visited Node\r\n          </li>\r\n          <li>\r\n            <div className=\"node node-shortest-path\"></div>\r\n            Shortest Path Node\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <Grid />\r\n    </Fragment>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Switch, Redirect } from 'react-router';\r\nimport { Home } from './components/Home';\r\nimport { PathFindingAlgorithmsLayout } from './components/PathFindingAlgorithms/Layout';\r\nimport { SortingAlgorithmsLayout } from './components/SortingAlgorithmsVisualizer/Layout';\r\nimport { SortingAlgorithmsContainer } from './components/SortingAlgorithmsVisualizer/Container';\r\n\r\nimport { AppRoute } from './components/AppRoute';\r\nimport { NotFound } from './components/Error/NotFound';\r\nimport { PathFindingAlgorithmsContainer } from './components/PathFindingAlgorithms/Container';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Switch>\r\n      <AppRoute exact path=\"/\" component={Home} />\r\n      <AppRoute\r\n        path=\"/pathfindingAlgorithms\"\r\n        component={PathFindingAlgorithmsContainer}\r\n        layout={PathFindingAlgorithmsLayout}\r\n      />\r\n      <AppRoute\r\n        path=\"/sortingAlgorithms\"\r\n        component={SortingAlgorithmsContainer}\r\n        layout={SortingAlgorithmsLayout}\r\n      />\r\n      <AppRoute path=\"/404\" component={NotFound} layout={null} />\r\n      <Redirect to=\"/404\" />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}